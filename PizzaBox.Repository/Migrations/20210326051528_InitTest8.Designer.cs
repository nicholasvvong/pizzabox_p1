// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PizzaBox.Repository;

namespace PizzaBox.Repository.Migrations
{
    [DbContext(typeof(DatabaseCreationContext))]
    [Migration("20210326051528_InitTest8")]
    partial class InitTest8
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.APizzaComponent", b =>
                {
                    b.Property<Guid>("CompID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Comps");

                    b.HasData(
                        new
                        {
                            CompID = new Guid("114c6890-38a8-4b3d-866c-ab892832a9be"),
                            Name = "beef",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("a24759cc-1a6d-43b9-bf13-85a12ef8c992"),
                            Name = "chicken",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("ea37cfa6-e8c6-4b8c-8adc-2a95646fd887"),
                            Name = "ham",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("00f6ad87-790f-4c73-a72a-c41c2b3193a8"),
                            Name = "mushroom",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("6a35cbe2-e9d3-430f-898e-2d6af98750be"),
                            Name = "olive",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("acc9474a-365a-49c3-be42-d894cce4ec7e"),
                            Name = "peppers",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("25d69bf8-8b64-4311-b742-af694849c2f3"),
                            Name = "pepporoni",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("1f11fce1-e013-4b3e-b216-66037310ac10"),
                            Name = "pineapple",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("c678c0d6-74b0-4a53-90b8-9b31b36daa72"),
                            Name = "salami",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("e2829ef5-3afe-4da5-8ec4-ce67379d8c36"),
                            Name = "sausage",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("c415de06-c7d3-4f3b-a6e9-c834bc7b3fc8"),
                            Name = "small",
                            Type = "size"
                        },
                        new
                        {
                            CompID = new Guid("66f30ba9-1854-44c6-8650-1284095a5a69"),
                            Name = "medium",
                            Type = "size"
                        },
                        new
                        {
                            CompID = new Guid("de3b91a3-6849-40b7-ad30-7b325525f447"),
                            Name = "large",
                            Type = "size"
                        },
                        new
                        {
                            CompID = new Guid("c53fab5d-18d9-4f87-b965-e588015a5771"),
                            Name = "extra large",
                            Type = "size"
                        },
                        new
                        {
                            CompID = new Guid("c8fde2cf-15a9-4273-b4cb-41fcfc8bfa9e"),
                            Name = "regular",
                            Type = "crust"
                        },
                        new
                        {
                            CompID = new Guid("0735291d-0c85-43e3-b80f-6f943af6b10d"),
                            Name = "hand-tossed",
                            Type = "crust"
                        },
                        new
                        {
                            CompID = new Guid("3860bac9-6f55-4f74-a289-006aaa5e0431"),
                            Name = "thin",
                            Type = "crust"
                        });
                });

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.AStore", b =>
                {
                    b.Property<Guid>("StoreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxPizzas")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MaxToppings")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoreID");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("PizzaBox.Domain.Models.BasicPizza", b =>
                {
                    b.Property<Guid>("PresetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AStoreStoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CrustCompID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PizzaPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("SizeCompID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresetID");

                    b.HasIndex("AStoreStoreID");

                    b.HasIndex("CrustCompID");

                    b.HasIndex("OrderID");

                    b.HasIndex("SizeCompID");

                    b.ToTable("BasicPizza");
                });

            modelBuilder.Entity("PizzaBox.Domain.Models.Customer", b =>
                {
                    b.Property<Guid>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Fname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastStoreStoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastTimeOrdered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StoreMangerStoreID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomerID");

                    b.HasIndex("LastStoreStoreID");

                    b.HasIndex("StoreMangerStoreID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("PizzaBox.Domain.Models.Order", b =>
                {
                    b.Property<Guid>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CurTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StoreID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StoreID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.Crust", b =>
                {
                    b.HasBaseType("PizzaBox.Domain.Abstracts.APizzaComponent");

                    b.Property<Guid?>("AStoreStoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CheeseStuffed")
                        .HasColumnType("bit");

                    b.Property<Guid>("CrustID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Inventory")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("StoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("StuffedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("AStoreStoreID");

                    b.ToTable("Crusts");
                });

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.Size", b =>
                {
                    b.HasBaseType("PizzaBox.Domain.Abstracts.APizzaComponent");

                    b.Property<Guid?>("AStoreStoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Inventory")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SizeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StoreID")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("AStoreStoreID");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.Topping", b =>
                {
                    b.HasBaseType("PizzaBox.Domain.Abstracts.APizzaComponent");

                    b.Property<Guid?>("AStoreStoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BasicPizzaPresetID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Inventory")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("StoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToppingID")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("AStoreStoreID");

                    b.HasIndex("BasicPizzaPresetID");

                    b.ToTable("Toppings");
                });

            modelBuilder.Entity("PizzaBox.Domain.Models.BasicPizza", b =>
                {
                    b.HasOne("PizzaBox.Domain.Abstracts.AStore", null)
                        .WithMany("PresetPizzas")
                        .HasForeignKey("AStoreStoreID");

                    b.HasOne("PizzaBox.Domain.Abstracts.Crust", "Crust")
                        .WithMany()
                        .HasForeignKey("CrustCompID");

                    b.HasOne("PizzaBox.Domain.Models.Order", null)
                        .WithMany("Pizzas")
                        .HasForeignKey("OrderID");

                    b.HasOne("PizzaBox.Domain.Abstracts.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeCompID");

                    b.Navigation("Crust");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("PizzaBox.Domain.Models.Customer", b =>
                {
                    b.HasOne("PizzaBox.Domain.Abstracts.AStore", "LastStore")
                        .WithMany()
                        .HasForeignKey("LastStoreStoreID");

                    b.HasOne("PizzaBox.Domain.Abstracts.AStore", "StoreManger")
                        .WithMany()
                        .HasForeignKey("StoreMangerStoreID");

                    b.Navigation("LastStore");

                    b.Navigation("StoreManger");
                });

            modelBuilder.Entity("PizzaBox.Domain.Models.Order", b =>
                {
                    b.HasOne("PizzaBox.Domain.Models.Customer", "Cust")
                        .WithMany()
                        .HasForeignKey("CustomerID");

                    b.HasOne("PizzaBox.Domain.Abstracts.AStore", "Store")
                        .WithMany()
                        .HasForeignKey("StoreID");

                    b.Navigation("Cust");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.Crust", b =>
                {
                    b.HasOne("PizzaBox.Domain.Abstracts.AStore", null)
                        .WithMany("CrustList")
                        .HasForeignKey("AStoreStoreID");

                    b.HasOne("PizzaBox.Domain.Abstracts.APizzaComponent", null)
                        .WithOne()
                        .HasForeignKey("PizzaBox.Domain.Abstracts.Crust", "CompID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.Size", b =>
                {
                    b.HasOne("PizzaBox.Domain.Abstracts.AStore", null)
                        .WithMany("SizeList")
                        .HasForeignKey("AStoreStoreID");

                    b.HasOne("PizzaBox.Domain.Abstracts.APizzaComponent", null)
                        .WithOne()
                        .HasForeignKey("PizzaBox.Domain.Abstracts.Size", "CompID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.Topping", b =>
                {
                    b.HasOne("PizzaBox.Domain.Abstracts.AStore", null)
                        .WithMany("ToppingsList")
                        .HasForeignKey("AStoreStoreID");

                    b.HasOne("PizzaBox.Domain.Models.BasicPizza", null)
                        .WithMany("Toppings")
                        .HasForeignKey("BasicPizzaPresetID");

                    b.HasOne("PizzaBox.Domain.Abstracts.APizzaComponent", null)
                        .WithOne()
                        .HasForeignKey("PizzaBox.Domain.Abstracts.Topping", "CompID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.AStore", b =>
                {
                    b.Navigation("CrustList");

                    b.Navigation("PresetPizzas");

                    b.Navigation("SizeList");

                    b.Navigation("ToppingsList");
                });

            modelBuilder.Entity("PizzaBox.Domain.Models.BasicPizza", b =>
                {
                    b.Navigation("Toppings");
                });

            modelBuilder.Entity("PizzaBox.Domain.Models.Order", b =>
                {
                    b.Navigation("Pizzas");
                });
#pragma warning restore 612, 618
        }
    }
}
