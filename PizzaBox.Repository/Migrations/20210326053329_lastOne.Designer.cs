// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PizzaBox.Repository;

namespace PizzaBox.Repository.Migrations
{
    [DbContext(typeof(DatabaseCreationContext))]
    [Migration("20210326053329_lastOne")]
    partial class lastOne
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.APizzaComponent", b =>
                {
                    b.Property<Guid>("CompID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Comps");

                    b.HasData(
                        new
                        {
                            CompID = new Guid("4de79d51-f00f-4dbf-a253-4dedb6626aca"),
                            Name = "beef",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("f22ea6c9-ed90-44a4-892d-17d5729eb936"),
                            Name = "chicken",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("afe5ed04-1a71-4842-ac4c-cdf49342d50d"),
                            Name = "ham",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("3f12fff3-db59-4456-9458-d945a2575f78"),
                            Name = "mushroom",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("c34134ae-f26b-4778-a187-ee053a59ad05"),
                            Name = "olive",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("2923722e-50dd-4e8f-a87e-b13f6fdc4dfa"),
                            Name = "peppers",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("427c6fdc-eae9-4fb5-ab8f-50c512ccc241"),
                            Name = "pepporoni",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("0d099659-f98c-412a-a658-da0834783bf4"),
                            Name = "pineapple",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("60153447-305c-4134-8fc3-e721c4ccda12"),
                            Name = "salami",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("eda1cc4d-3811-4395-b1b8-d351f284dc19"),
                            Name = "sausage",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("45d19695-0adb-4f4a-bd24-f1e35be32a50"),
                            Name = "small",
                            Type = "size"
                        },
                        new
                        {
                            CompID = new Guid("7fdd66bc-dd4e-45f2-8594-f5fbefb57ed0"),
                            Name = "medium",
                            Type = "size"
                        },
                        new
                        {
                            CompID = new Guid("79f3ac47-b1f9-4d37-a60b-5beeeea6a6b3"),
                            Name = "large",
                            Type = "size"
                        },
                        new
                        {
                            CompID = new Guid("64f9f15b-897d-4ecf-bcd4-964a61fb2600"),
                            Name = "extra large",
                            Type = "size"
                        },
                        new
                        {
                            CompID = new Guid("007c8bf4-3ab5-468a-b2f1-35bdd626bc19"),
                            Name = "regular",
                            Type = "crust"
                        },
                        new
                        {
                            CompID = new Guid("13915804-2597-47ce-a580-279c5a77064a"),
                            Name = "hand-tossed",
                            Type = "crust"
                        },
                        new
                        {
                            CompID = new Guid("c0a06482-b60f-4b1c-87f8-1cd99caf6c20"),
                            Name = "thin",
                            Type = "crust"
                        });
                });

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.AStore", b =>
                {
                    b.Property<Guid>("StoreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxPizzas")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MaxToppings")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoreID");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("PizzaBox.Domain.Models.BasicPizza", b =>
                {
                    b.Property<Guid>("PresetID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("CrustCompID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PizzaPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("SizeCompID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PresetID", "Type");

                    b.HasIndex("CrustCompID");

                    b.HasIndex("OrderID");

                    b.HasIndex("SizeCompID");

                    b.ToTable("BasicPizza");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BasicPizza");
                });

            modelBuilder.Entity("PizzaBox.Domain.Models.Customer", b =>
                {
                    b.Property<Guid>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Fname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastStoreStoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastTimeOrdered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StoreMangerStoreID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomerID");

                    b.HasIndex("LastStoreStoreID");

                    b.HasIndex("StoreMangerStoreID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("PizzaBox.Domain.Models.Order", b =>
                {
                    b.Property<Guid>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CurTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StoreID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StoreID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.Crust", b =>
                {
                    b.HasBaseType("PizzaBox.Domain.Abstracts.APizzaComponent");

                    b.Property<Guid?>("AStoreStoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CheeseStuffed")
                        .HasColumnType("bit");

                    b.Property<Guid>("CrustID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Inventory")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("StoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("StuffedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("AStoreStoreID");

                    b.ToTable("Crusts");
                });

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.Size", b =>
                {
                    b.HasBaseType("PizzaBox.Domain.Abstracts.APizzaComponent");

                    b.Property<Guid?>("AStoreStoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Inventory")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SizeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StoreID")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("AStoreStoreID");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.Topping", b =>
                {
                    b.HasBaseType("PizzaBox.Domain.Abstracts.APizzaComponent");

                    b.Property<Guid?>("AStoreStoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BasicPizzaPresetID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BasicPizzaType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Inventory")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("StoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToppingID")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("AStoreStoreID");

                    b.HasIndex("BasicPizzaPresetID", "BasicPizzaType");

                    b.ToTable("Toppings");
                });

            modelBuilder.Entity("PizzaBox.Domain.Models.PresetPizza", b =>
                {
                    b.HasBaseType("PizzaBox.Domain.Models.BasicPizza");

                    b.Property<Guid>("BasicPizzaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StoreID")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("StoreID");

                    b.HasDiscriminator().HasValue("PresetPizza");
                });

            modelBuilder.Entity("PizzaBox.Domain.Models.BasicPizza", b =>
                {
                    b.HasOne("PizzaBox.Domain.Abstracts.Crust", "Crust")
                        .WithMany()
                        .HasForeignKey("CrustCompID");

                    b.HasOne("PizzaBox.Domain.Models.Order", null)
                        .WithMany("Pizzas")
                        .HasForeignKey("OrderID");

                    b.HasOne("PizzaBox.Domain.Abstracts.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeCompID");

                    b.Navigation("Crust");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("PizzaBox.Domain.Models.Customer", b =>
                {
                    b.HasOne("PizzaBox.Domain.Abstracts.AStore", "LastStore")
                        .WithMany()
                        .HasForeignKey("LastStoreStoreID");

                    b.HasOne("PizzaBox.Domain.Abstracts.AStore", "StoreManger")
                        .WithMany()
                        .HasForeignKey("StoreMangerStoreID");

                    b.Navigation("LastStore");

                    b.Navigation("StoreManger");
                });

            modelBuilder.Entity("PizzaBox.Domain.Models.Order", b =>
                {
                    b.HasOne("PizzaBox.Domain.Models.Customer", "Cust")
                        .WithMany()
                        .HasForeignKey("CustomerID");

                    b.HasOne("PizzaBox.Domain.Abstracts.AStore", "Store")
                        .WithMany()
                        .HasForeignKey("StoreID");

                    b.Navigation("Cust");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.Crust", b =>
                {
                    b.HasOne("PizzaBox.Domain.Abstracts.AStore", null)
                        .WithMany("CrustList")
                        .HasForeignKey("AStoreStoreID");

                    b.HasOne("PizzaBox.Domain.Abstracts.APizzaComponent", null)
                        .WithOne()
                        .HasForeignKey("PizzaBox.Domain.Abstracts.Crust", "CompID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.Size", b =>
                {
                    b.HasOne("PizzaBox.Domain.Abstracts.AStore", null)
                        .WithMany("SizeList")
                        .HasForeignKey("AStoreStoreID");

                    b.HasOne("PizzaBox.Domain.Abstracts.APizzaComponent", null)
                        .WithOne()
                        .HasForeignKey("PizzaBox.Domain.Abstracts.Size", "CompID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.Topping", b =>
                {
                    b.HasOne("PizzaBox.Domain.Abstracts.AStore", null)
                        .WithMany("ToppingsList")
                        .HasForeignKey("AStoreStoreID");

                    b.HasOne("PizzaBox.Domain.Abstracts.APizzaComponent", null)
                        .WithOne()
                        .HasForeignKey("PizzaBox.Domain.Abstracts.Topping", "CompID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("PizzaBox.Domain.Models.BasicPizza", null)
                        .WithMany("Toppings")
                        .HasForeignKey("BasicPizzaPresetID", "BasicPizzaType");
                });

            modelBuilder.Entity("PizzaBox.Domain.Models.PresetPizza", b =>
                {
                    b.HasOne("PizzaBox.Domain.Abstracts.AStore", "store")
                        .WithMany("PresetPizzas")
                        .HasForeignKey("StoreID");

                    b.Navigation("store");
                });

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.AStore", b =>
                {
                    b.Navigation("CrustList");

                    b.Navigation("PresetPizzas");

                    b.Navigation("SizeList");

                    b.Navigation("ToppingsList");
                });

            modelBuilder.Entity("PizzaBox.Domain.Models.BasicPizza", b =>
                {
                    b.Navigation("Toppings");
                });

            modelBuilder.Entity("PizzaBox.Domain.Models.Order", b =>
                {
                    b.Navigation("Pizzas");
                });
#pragma warning restore 612, 618
        }
    }
}
