// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PizzaBox.Repository;

namespace PizzaBox.Repository.Migrations
{
    [DbContext(typeof(DatabaseCreationContext))]
    [Migration("20210326051307_InitTest7")]
    partial class InitTest7
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.APizzaComponent", b =>
                {
                    b.Property<Guid>("CompID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Comps");

                    b.HasData(
                        new
                        {
                            CompID = new Guid("7c3ab275-b41d-455e-ae5c-a4c746e12396"),
                            Name = "beef",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("50134fe6-87fb-437e-b033-79cb842a4de9"),
                            Name = "chicken",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("b14ef42c-32d2-49af-b53a-077795a3fced"),
                            Name = "ham",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("59a64af7-3d3c-490d-b6aa-cc0ab9df9105"),
                            Name = "mushroom",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("eabb21ca-09d4-4987-92c6-c62a545dccf8"),
                            Name = "olive",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("14293d26-ff98-41ea-95b1-7e479dcf9c58"),
                            Name = "peppers",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("9cfcf550-dd9a-44f6-b40e-8cc9c46bdab6"),
                            Name = "pepporoni",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("2882063a-c598-41ee-be6d-753e2acf46d0"),
                            Name = "pineapple",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("fb0bf042-2ad4-4336-80c5-944a093e7e0f"),
                            Name = "salami",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("d07f8132-28e4-4233-a992-ad4ebb499a69"),
                            Name = "sausage",
                            Type = "topping"
                        },
                        new
                        {
                            CompID = new Guid("fd8a1393-85fb-4022-a484-6d14118ee42e"),
                            Name = "small",
                            Type = "size"
                        },
                        new
                        {
                            CompID = new Guid("3e937c0b-dffd-46ed-b140-6bf5b3dbe4c7"),
                            Name = "medium",
                            Type = "size"
                        },
                        new
                        {
                            CompID = new Guid("50f706f5-dd78-4d75-a3dc-16df0d041238"),
                            Name = "large",
                            Type = "size"
                        },
                        new
                        {
                            CompID = new Guid("4ea9a540-a104-452f-a074-31a40f252f44"),
                            Name = "extra large",
                            Type = "size"
                        },
                        new
                        {
                            CompID = new Guid("0b611301-ada4-414b-bfaf-3b0f43352bef"),
                            Name = "regular",
                            Type = "crust"
                        },
                        new
                        {
                            CompID = new Guid("b2831169-9474-48f9-930b-99895ed6fc19"),
                            Name = "hand-tossed",
                            Type = "crust"
                        },
                        new
                        {
                            CompID = new Guid("8a887667-a3db-4408-972f-67c7eb6d7b6e"),
                            Name = "thin",
                            Type = "crust"
                        });
                });

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.AStore", b =>
                {
                    b.Property<Guid>("StoreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxPizzas")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MaxToppings")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoreID");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("PizzaBox.Domain.Models.BasicPizza", b =>
                {
                    b.Property<Guid>("PresetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AStoreStoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CrustCompID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PizzaPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("SizeCompID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresetID");

                    b.HasIndex("AStoreStoreID");

                    b.HasIndex("CrustCompID");

                    b.HasIndex("OrderID");

                    b.HasIndex("SizeCompID");

                    b.ToTable("BasicPizza");
                });

            modelBuilder.Entity("PizzaBox.Domain.Models.Customer", b =>
                {
                    b.Property<Guid>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Fname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastStoreStoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastTimeOrdered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StoreMangerStoreID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomerID");

                    b.HasIndex("LastStoreStoreID");

                    b.HasIndex("StoreMangerStoreID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("PizzaBox.Domain.Models.Order", b =>
                {
                    b.Property<Guid>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CurTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StoreID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StoreID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.Crust", b =>
                {
                    b.HasBaseType("PizzaBox.Domain.Abstracts.APizzaComponent");

                    b.Property<Guid?>("AStoreStoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CheeseStuffed")
                        .HasColumnType("bit");

                    b.Property<Guid>("CrustID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Inventory")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("StoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("StuffedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("AStoreStoreID");

                    b.ToTable("Crusts");
                });

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.Size", b =>
                {
                    b.HasBaseType("PizzaBox.Domain.Abstracts.APizzaComponent");

                    b.Property<Guid?>("AStoreStoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Inventory")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SizeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StoreID")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("AStoreStoreID");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.Topping", b =>
                {
                    b.HasBaseType("PizzaBox.Domain.Abstracts.APizzaComponent");

                    b.Property<Guid?>("AStoreStoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BasicPizzaPresetID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Inventory")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("StoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToppingID")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("AStoreStoreID");

                    b.HasIndex("BasicPizzaPresetID");

                    b.ToTable("Toppings");
                });

            modelBuilder.Entity("PizzaBox.Domain.Models.BasicPizza", b =>
                {
                    b.HasOne("PizzaBox.Domain.Abstracts.AStore", null)
                        .WithMany("PresetPizzas")
                        .HasForeignKey("AStoreStoreID");

                    b.HasOne("PizzaBox.Domain.Abstracts.Crust", "Crust")
                        .WithMany()
                        .HasForeignKey("CrustCompID");

                    b.HasOne("PizzaBox.Domain.Models.Order", null)
                        .WithMany("Pizzas")
                        .HasForeignKey("OrderID");

                    b.HasOne("PizzaBox.Domain.Abstracts.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeCompID");

                    b.Navigation("Crust");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("PizzaBox.Domain.Models.Customer", b =>
                {
                    b.HasOne("PizzaBox.Domain.Abstracts.AStore", "LastStore")
                        .WithMany()
                        .HasForeignKey("LastStoreStoreID");

                    b.HasOne("PizzaBox.Domain.Abstracts.AStore", "StoreManger")
                        .WithMany()
                        .HasForeignKey("StoreMangerStoreID");

                    b.Navigation("LastStore");

                    b.Navigation("StoreManger");
                });

            modelBuilder.Entity("PizzaBox.Domain.Models.Order", b =>
                {
                    b.HasOne("PizzaBox.Domain.Models.Customer", "Cust")
                        .WithMany()
                        .HasForeignKey("CustomerID");

                    b.HasOne("PizzaBox.Domain.Abstracts.AStore", "Store")
                        .WithMany()
                        .HasForeignKey("StoreID");

                    b.Navigation("Cust");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.Crust", b =>
                {
                    b.HasOne("PizzaBox.Domain.Abstracts.AStore", null)
                        .WithMany("CrustList")
                        .HasForeignKey("AStoreStoreID");

                    b.HasOne("PizzaBox.Domain.Abstracts.APizzaComponent", null)
                        .WithOne()
                        .HasForeignKey("PizzaBox.Domain.Abstracts.Crust", "CompID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.Size", b =>
                {
                    b.HasOne("PizzaBox.Domain.Abstracts.AStore", null)
                        .WithMany("SizeList")
                        .HasForeignKey("AStoreStoreID");

                    b.HasOne("PizzaBox.Domain.Abstracts.APizzaComponent", null)
                        .WithOne()
                        .HasForeignKey("PizzaBox.Domain.Abstracts.Size", "CompID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.Topping", b =>
                {
                    b.HasOne("PizzaBox.Domain.Abstracts.AStore", null)
                        .WithMany("ToppingsList")
                        .HasForeignKey("AStoreStoreID");

                    b.HasOne("PizzaBox.Domain.Models.BasicPizza", null)
                        .WithMany("Toppings")
                        .HasForeignKey("BasicPizzaPresetID");

                    b.HasOne("PizzaBox.Domain.Abstracts.APizzaComponent", null)
                        .WithOne()
                        .HasForeignKey("PizzaBox.Domain.Abstracts.Topping", "CompID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PizzaBox.Domain.Abstracts.AStore", b =>
                {
                    b.Navigation("CrustList");

                    b.Navigation("PresetPizzas");

                    b.Navigation("SizeList");

                    b.Navigation("ToppingsList");
                });

            modelBuilder.Entity("PizzaBox.Domain.Models.BasicPizza", b =>
                {
                    b.Navigation("Toppings");
                });

            modelBuilder.Entity("PizzaBox.Domain.Models.Order", b =>
                {
                    b.Navigation("Pizzas");
                });
#pragma warning restore 612, 618
        }
    }
}
